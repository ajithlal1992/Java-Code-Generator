/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.javacodegenerator.design;

import com.javacodegenerator.action.CreateBean;
import com.javacodegenerator.action.CreateDatabaseConnection;
import com.javacodegenerator.action.CreateDatabaseProcess;
import com.javacodegenerator.db.Dbcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Ajith Lal
 */
public class MainWindow extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        Dbcon.init();
        ArrayList<String> databases = Dbcon.getDatabases();
        for (String database1 : databases) {
            database.addItem(database1);
        }
        database.requestFocus();
        setVisible(true);
        setLocationRelativeTo(null);
        cancel.addActionListener(this);
        submit.addActionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        createBeanCheck = new javax.swing.JCheckBox();
        createDatabaseCheck = new javax.swing.JCheckBox();
        createDatabaseProcessCheck = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        cancel = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        database = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("JAVA CODE GENERATOR");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel2.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Database Name : ");

        jLabel3.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("CREATE DETAILS");

        createBeanCheck.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        createBeanCheck.setText("Create Bean");
        createBeanCheck.setToolTipText("SELECT CHECKBOX TO CREATE BEAN CLASS!!");

        createDatabaseCheck.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        createDatabaseCheck.setText("Create Database Connection Class");
        createDatabaseCheck.setToolTipText("SELECT CHECKBOX TO CREATE DATABASE CLASS!!");

        createDatabaseProcessCheck.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        createDatabaseProcessCheck.setText("Create Database Process");
        createDatabaseProcessCheck.setToolTipText("SELECT CHECKBOX TO CREATE DATABASE PROCESS CLASS!!");

        cancel.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        cancel.setText("<<CANCEL");

        submit.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        submit.setText("SUBMIT>>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(cancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                .addComponent(submit))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(submit))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        database.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        database.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-- SELECT ANY DATABASE --" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(database, 0, 1, Short.MAX_VALUE))
                    .addComponent(createDatabaseProcessCheck, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createDatabaseCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createBeanCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(database, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(createBeanCheck)
                .addGap(18, 18, 18)
                .addComponent(createDatabaseCheck)
                .addGap(18, 18, 18)
                .addComponent(createDatabaseProcessCheck)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MainWindow().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JCheckBox createBeanCheck;
    private javax.swing.JCheckBox createDatabaseCheck;
    private javax.swing.JCheckBox createDatabaseProcessCheck;
    private javax.swing.JComboBox database;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == cancel) {
            System.exit(0);
        } else if (e.getSource() == submit) {
            if (0 == database.getSelectedIndex()) {
                JOptionPane.showMessageDialog(null, "Please Enter Database Name!!!", "ERROR", JOptionPane.ERROR_MESSAGE);
                database.requestFocus();
            } else if (!createBeanCheck.isSelected() && !createDatabaseCheck.isSelected() && !createDatabaseProcessCheck.isSelected()) {
                JOptionPane.showMessageDialog(null, "Please Select Any Checkbox to Create Bean or Database Connection or Database process!!!", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    Dbcon.database = database.getSelectedItem().toString();
                    Integer i = Dbcon.init();
                    if (i > 0) {
                        if (createBeanCheck.isSelected()) {
                            File file = new File("com");
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                            file = new File(file.getAbsolutePath()+File.separator+database.getSelectedItem().toString());
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                            file = new File(file.getAbsolutePath()+ File.separator + "bean");
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                            ArrayList<String> tables = Dbcon.getTables();
                            for (String table : tables) {
                                CreateBean.createBean(file.getAbsolutePath(), table,database.getSelectedItem().toString());
                            }
                        }
                        if (createDatabaseCheck.isSelected()) {
                            File file = new File("com");
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                            file = new File(file.getAbsolutePath()+File.separator+database.getSelectedItem().toString());
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                            file = new File(file.getAbsolutePath()+ File.separator + "database");
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                            File file1 = new File(file.getAbsoluteFile() + File.separator + "DatabaseConnection.java");
                            if (!file1.exists()) {
                                file1.createNewFile();
                            }
                            CreateDatabaseConnection.createDatabaseConnection(database.getSelectedItem().toString(), file1.getAbsolutePath());
                        }
                        if (createDatabaseProcessCheck.isSelected()) {

                            File file = new File("com");
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                            file = new File(file.getAbsolutePath()+File.separator+database.getSelectedItem().toString());
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                            file = new File(file.getAbsolutePath()+ File.separator + "database");
                            if (!file.exists()) {
                                file.mkdirs();
                            }
                            File file1 = new File(file.getAbsoluteFile() + File.separator + "DatabaseProcess.java");
                            if (!file1.exists()) {
                                file1.createNewFile();
                            }
                            ArrayList<String> tables = Dbcon.getTables();
                            CreateDatabaseProcess.createDatabaseProcess(tables, file1.getAbsolutePath(),database.getSelectedItem().toString());
                        }
                        JOptionPane.showMessageDialog(null, "Your Requirements is Completed!!!", "ERROR", JOptionPane.ERROR_MESSAGE);
                        System.exit(0);
                    } else {
                        System.out.println("*********************************************");
                        System.out.println("***   Database " + database.getSelectedItem().toString() + " Not Exist   ***");
                        System.out.println("*********************************************");
                        JOptionPane.showMessageDialog(null, "You Selected database \"" + database.getSelectedItem().toString() + "\" is not Exist...\nPlease enter an existing database!!!", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
}
